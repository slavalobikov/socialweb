{"version":3,"sources":["Component/Footer/Footer.module.css","Component/Main/Dialogs/Message/Message.module.css","Component/Header/Header.module.css","Component/Main/Dialogs/Me/Me.module.css","Component/Main/Users/Users.module.css","Component/Main/Main/Main.module.css","Component/Main/Main/Post/Post.module.css","Component/Main/Dialogs/Dialogs.module.css","logo.svg","Component/Header/Header.jsx","Component/Main/Main/Post/Post.jsx","common/Preloader.jsx","Component/Main/Main/Main.jsx","Component/Footer/Footer.jsx","Component/Main/Dialogs/Me/Me.jsx","Component/Main/Dialogs/Message/Message.jsx","Component/Main/Dialogs/Dialogs.jsx","Redux/Reducers/UsersReducer.js","Redux/ActionTypes.js","api/api.js","Redux/Reducers/ProfileReducer.js","Component/Main/Main/MainContainer.jsx","Component/Main/Users/Users.jsx","Component/Main/Users/UsersContainer.jsx","App.js","serviceWorker.js","Redux/ReduxStore.jsx","index.js"],"names":["module","exports","Header","props","className","s","header","to","activeClassName","active","Post","name","imgAva","src","img","alt","text","Preloader","Main","PostElement","profilePage","map","p","key","id","content","isFetching","photo","value","newPostText","onChange","e","target","updateNewPostText","onClick","addPost","Footer","footer","imgMessages","Me","me","nameme","nameUser","Dialogs","dialogs","dilogsItems","dialog","messages","Message","initialState","users","pageSize","totalUsers","currentPage","isFetchingTrue","type","IS_FETCHING_TRUE","isFetchingFalse","IS_FETCHING_FALSE","SET_USERS","FOLLOW_USER","UNFOLLOW_USER","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","UsersPageReducer","state","action","u","userID","isFollow","totalCount","UPDATE_NEW_POST_TEXT","ADD_NEW_POST_TEXT","URL","getUsers","axios","then","response","data","ProfilePageReducer","MainContainer","this","match","params","setPhotoUser","photos","large","React","Component","withURLDataContainerComponent","withRouter","connect","dispatch","Users","pages","pageNumber","setCurrent","setUsers","items","selectedPage","unfollow","follow","UsersContainer","setTotalUsersCount","pagesCount","Math","ceil","i","push","App","path","render","component","Boolean","window","location","hostname","reducers","combineReducers","store","createStore","getState","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ecc4dbfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1dvtT\",\"img\":\"Footer_img__1lQzi\",\"imgMessages\":\"Footer_imgMessages__1ACES\",\"active\":\"Footer_active__1A6_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Message_dialogs__bIMn1\",\"dilogsItems\":\"Message_dilogsItems__3kFiL\",\"messages\":\"Message_messages__2XjiL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__318n1\",\"active\":\"Header_active__1tsaU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"me\":\"Me_me__mJ2AC\",\"nameme\":\"Me_nameme__3nqDB\",\"sticky\":\"Me_sticky__27dzc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Users_content__19OzP\",\"selectedPage\":\"Users_selectedPage__1q73A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Main_content__3Bs3o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgAva\":\"Post_imgAva__17ww0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialogs_content___OaR_\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <NavLink to=\"/profile\" activeClassName={s.active} >Моя страница</NavLink>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.active} >Сообщения</NavLink>\r\n            <NavLink to=\"/users\" activeClassName={s.active} >Пользователи</NavLink>\r\n        </header>\r\n\r\n    )\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\n\r\nconst Post = (props) => {\r\n    \r\n    return (\r\n        <div>\r\n            <div>\r\n                <div> {props.name} </div>\r\n                <img className={s.imgAva} src={props.img} alt={props.name} />\r\n                 {props.text}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\r\n\r\nconst Preloader = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Загрузка...</h1>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport s from './Main.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport Preloader from \"../../../common/Preloader\";\r\n\r\nconst Main = (props) => {\r\n\r\n    let PostElement = props.profilePage.map ( p => <Post img={p.img} text={p.text} key={p.id} name={p.name} />  );\r\n\r\n    let onChange = (e) => {\r\n        let text = e.target.value;\r\n        props.updateNewPostText(text);\r\n    };\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            {props.isFetching ? <Preloader />\r\n            : <img src={!props.photo ? 'https://img8.eadaily.com/r650x450/o/7ac/95f49146b4501082acd22918d4cc2.jpg' : props.photo}\r\n                   alt=\"\"/>\r\n            }\r\n\r\n            <textarea value={props.newPostText} onChange={onChange}> </textarea>  <button onClick={ addPost } >Отрправить </button>\r\n            {PostElement}\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Main;","import React from 'react';\r\nimport s from './Footer.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Footer = (props) => {\r\n    return (\r\n        <footer className={s.footer}>\r\n            <NavLink to=\"/profile\" activeClassName={s.active}><img className={s.img} src=\"https://cdn4.iconfinder.com/data/icons/evil-icons-user-interface/64/avatar-512.png\" alt=\"Profile\"/></NavLink>\r\n\r\n            <NavLink to=\"/dialogs\" activeClassName={s.active}><img className={s.imgMessages} src=\"https://www.logolynx.com/images/logolynx/75/75189e2b07df0d2a8cc42dee4cf889b7.png\" alt=\"messages\"/></NavLink>\r\n            <NavLink to=\"/users\" activeClassName={s.active}><img className={s.img} src=\"https://icons.iconarchive.com/icons/custom-icon-design/pretty-office-13/512/Users-icon.png\" alt=\"\"/>\r\n            </NavLink>\r\n        </footer>\r\n\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport s from './Me.module.css'\r\n\r\nconst Me = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.me} id=\"navbar\">\r\n            <div className={s.nameme}> Вы хххх </div>\r\n            <img src=\"https://media.vanityfair.com/photos/5c5325d33889055ec0570bcf/master/pass/t-ava-max-interview.jpg\" alt=\"\"/>\r\n            <div className={s.nameUser}> Пользователь </div>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQiTFKqGQSmNR0oBxxx7XkVRlO_OijvVdh6n7RRyp1fWsKoFPSQ&usqp=CAU\" alt=\"\"/>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Me;","import React from 'react';\r\nimport s from './Message.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dilogsItems}>\r\n                <div className={s.dialog}>\r\n                   <NavLink to=\"/dialogs/1\" >Dima</NavLink>\r\n                </div>\r\n                <div className={s.dialog}>\r\n                    <NavLink to=\"/dialogs/2\" >Sasha</NavLink>\r\n                </div>\r\n                <div className={s.dialog}>\r\n                    <NavLink to=\"/dialogs/3\" >Sveta</NavLink>\r\n                </div>\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div className={s.dialog}>ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd</div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport Me from \"./Me/Me\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <Me />\r\n            <Message />\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import {ADD_NEW_POST_TEXT,  FollowAC,  UPDATE_NEW_POST_TEXT} from \"../ActionTypes\";\r\n\r\n\r\nlet initialState = {\r\n    users:[],\r\n    pageSize:25,\r\n    totalUsers:0,\r\n    currentPage:1,\r\n    isFetching: true,\r\n};\r\n\r\nconst UsersPageReducer = (state = initialState, action ) => {\r\n\r\n\r\n    switch(action.type) {\r\n        case FOLLOW_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.map (u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, isFollow:true}\r\n                    }\r\n                    return u;\r\n                })\r\n\r\n\r\n            };\r\n        case UNFOLLOW_USER: {\r\n            return {\r\n                ...state,\r\n                users:state.users.map (u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, isFollow:false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return  {\r\n\r\n                ...state,\r\n                users:action.users\r\n            }\r\n\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsers: action.totalCount\r\n            }\r\n        }\r\n        case IS_FETCHING_TRUE: {\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        }\r\n        case IS_FETCHING_FALSE: {\r\n            return {\r\n                ...state,\r\n                isFetching: false\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\n\r\nexport const setUsers = (users) => ({type:SET_USERS, users});\r\nexport const setCurrent = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setTotalUsersCount = (totalCount) => ({type: SET_TOTAL_USERS_COUNT, totalCount});\r\nexport const isFetchingTrue = () => ({type:IS_FETCHING_TRUE});\r\nexport const isFetchingFalse = () => ({type:IS_FETCHING_FALSE});\r\nexport const follow = (userID) => {\r\n    return {\r\n        type:FOLLOW_USER,\r\n        userID\r\n    }\r\n};\r\nexport const unfollow = (userID) => {\r\n    return {\r\n        type:UNFOLLOW_USER,\r\n        userID\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexport const SET_USERS = \"SET_USERS\";\r\n\r\n const FOLLOW_USER = \"FOLLOW_USER\";\r\n const UNFOLLOW_USER = \"UNFOLLOW_USER\";\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst IS_FETCHING_TRUE = 'IS_FETCHING_TRUE';\r\nconst IS_FETCHING_FALSE = 'IS_FETCHING_FALSE';\r\nexport default UsersPageReducer;","import {SET_USERS} from \"./Reducers/UsersReducer\";\r\n\r\n\r\n\r\nexport const UPDATE_NEW_POST_TEXT = (text) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        text\r\n\r\n    }\r\n};\r\nexport const ADD_NEW_POST_TEXT = () => {\r\n    return {\r\n        type: ADD_NEW_POST_TEXT,\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const setUsers = (users) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    }\r\n};","import * as axios from \"axios\";\r\n\r\nlet URL = 'https://social-network.samuraijs.com/api/1.0/';\r\n\r\n\r\n\r\n/*\r\nexport const getUsers = (currentPage = 1, pageSize) => {\r\n    return axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${currentPage}&count=${pageSize}`)\r\n        .then(response => {\r\n          return response.data\r\n        });\r\n\r\n};*/\r\n\r\nexport const getUsers = (currentPage = 1, pageSize) => {\r\n    return axios.get(`${URL}users?page=${currentPage}&count=${pageSize}`)\r\n        .then(response => {\r\n            return response.data\r\n        });\r\n\r\n};\r\n\r\nexport const getProfile = (userID) => {\r\n    return axios.get(`${URL}profile/${userID}`).then(response => {\r\n        return response.data\r\n    })\r\n};\r\n","import {ADD_NEW_POST_TEXT, UPDATE_NEW_POST_TEXT} from \"../ActionTypes\";\r\n\r\nconst SET_PHOTO_USER = 'SET_PHOTO_USER';\r\n\r\nlet initialState = {\r\n    profilePage:[\r\n        {\r\n            id:1,\r\n            text: \"Привет\",\r\n            name: \"Валерий Цепкало\",\r\n            img: \"https://officelife.media/upload/iblock/a67/a673bdc2396a44e83b19b8a1665800d0.jpg\"\r\n        },\r\n        {\r\n            id:2,\r\n            text: \"Как дела?\",\r\n            name: \"Валерий Цепкало\",\r\n            img: \"https://officelife.media/upload/iblock/a67/a673bdc2396a44e83b19b8a1665800d0.jpg\"\r\n        },\r\n        {\r\n            id:3,\r\n            text: \"Что нового?\",\r\n            name: \"Валерий Цепкало\",\r\n            img: \"https://officelife.media/upload/iblock/a67/a673bdc2396a44e83b19b8a1665800d0.jpg\"\r\n        }\r\n    ],\r\n    newPostText: \"Heee\",\r\n    photo:'',\r\n};\r\n\r\nconst ProfilePageReducer = (state = initialState, action ) => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.text\r\n            }\r\n\r\n        }\r\n        case ADD_NEW_POST_TEXT: {\r\n\r\n            let newPostText = {\r\n                id:5,\r\n                text:state.newPostText,\r\n                name: \"Валерий Цепкало\",\r\n                img: \"https://officelife.media/upload/iblock/a67/a673bdc2396a44e83b19b8a1665800d0.jpg\"\r\n            };\r\n            return {\r\n                ...state,\r\n                profilePage: [...state.profilePage, newPostText],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case SET_PHOTO_USER: {\r\n            return {\r\n                ...state,\r\n                photo:action.photo\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nexport const setPhotoUser = (photo) => ({type: SET_PHOTO_USER, photo});\r\n\r\nexport default ProfilePageReducer;","import {connect} from \"react-redux\";\r\nimport React from 'react'\r\n\r\nimport Main from \"./Main\";\r\nimport {ADD_NEW_POST_TEXT, UPDATE_NEW_POST_TEXT} from \"../../../Redux/ActionTypes\";\r\nimport {getProfile} from \"../../../api/api\";\r\nimport {setPhotoUser} from \"../../../Redux/Reducers/ProfileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {isFetchingFalse, isFetchingTrue} from \"../../../Redux/Reducers/UsersReducer\";\r\n\r\n\r\nclass MainContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.isFetchingTrue();\r\n        getProfile(this.props.match.params.userID).then(response =>{\r\n            this.props.setPhotoUser(response.photos.large);\r\n            this.props.isFetchingFalse();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <Main {...this.props} />\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ( {\r\n    profilePage:state.ProfilePageReducer.profilePage,\r\n    newPostText:state.ProfilePageReducer.newPostText,\r\n    photo: state.ProfilePageReducer.photo,\r\n    isFetching: state.UsersPageReducer.isFetching,\r\n});\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewPostText:(text) => {\r\n            dispatch(UPDATE_NEW_POST_TEXT(text))\r\n        },\r\n        addPost:() => {\r\n            dispatch(ADD_NEW_POST_TEXT())\r\n        },\r\n        setPhotoUser:(photo) => {\r\n            dispatch(setPhotoUser(photo))\r\n        },\r\n        isFetchingTrue:() => {\r\n            dispatch(isFetchingTrue())\r\n        },\r\n        isFetchingFalse:()=> {\r\n            dispatch(isFetchingFalse())\r\n        }\r\n    }\r\n};\r\n\r\nlet withURLDataContainerComponent = withRouter (MainContainer);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withURLDataContainerComponent)\r\n\r\n","import React from 'react';\r\nimport s from './Users.module.css'\r\nimport {getUsers} from \"../../../api/api\";\r\nimport Preloader from \"../../../common/Preloader\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Users = (props) => {\r\n\r\n    let onPageChanged = (pageNumber) => {\r\n\r\n        props.isFetchingTrue();\r\n        props.setCurrent(pageNumber);\r\n            getUsers(pageNumber, props.pageSize )\r\n            .then(response => {\r\n                props.setUsers(response.items);\r\n                props.isFetchingFalse();\r\n            });\r\n\r\n    };\r\n\r\n    let pages = props.pages.map ( p => <div onClick={ (e) => onPageChanged(p) } className={ props.currentPage === p && s.selectedPage  } >{p}</div>  );\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            { props.isFetching ? <Preloader/>\r\n            : <div>\r\n                    {props.users.map(u =>\r\n                        <div>\r\n                            <NavLink to={\"/profile/\" + u.id}>\r\n                            {u.name}\r\n                            <div><img\r\n                                src={!u.photos.large ? 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/VK.com-logo.svg/1200px-VK.com-logo.svg.png' : u.photos.large}\r\n                                alt={u.name}/></div>\r\n                            </NavLink>\r\n                            {u.isFollow\r\n                                ? <button onClick={() => props.unfollow(u.id)}> Отписаться </button>\r\n                                : <button onClick={() => props.follow(u.id)}> Подписаться </button>}</div>\r\n                    )\r\n                    }\r\n                </div>}\r\n        <div>\r\n            {pages}\r\n        </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Users;","import {connect} from \"react-redux\";\r\nimport React from \"react\"\r\nimport Users from \"./Users\";\r\nimport {\r\n    follow,\r\n    isFetchingFalse,\r\n    isFetchingTrue,\r\n    setCurrent,\r\n    setTotalUsersCount,\r\n    setUsers, unfollow\r\n} from \"../../../Redux/Reducers/UsersReducer\";\r\nimport {getUsers} from \"../../../api/api\";\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n            this.props.isFetchingTrue();\r\n            getUsers(this.props.currentPage, this.props.pageSize ).then(response => {\r\n            this.props.setUsers(response.items);\r\n            this.props.setTotalUsersCount(response.totalCount);\r\n            this.props.isFetchingFalse();\r\n        });\r\n\r\n\r\n\r\n            };\r\n\r\n\r\n    render() {\r\n\r\n        let pagesCount = Math.ceil(this.props.totalUsers/this.props.pageSize);\r\n        let pages = [];\r\n        for (let i =1; i<= pagesCount; i++) {\r\n            pages.push(i);\r\n        }\r\n        debugger\r\n        return (\r\n             <Users {...this.props}  pages={pages}   />\r\n            )\r\n\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.UsersPageReducer.users,\r\n        pageSize: state.UsersPageReducer.pageSize,\r\n        totalUsers: state.UsersPageReducer.totalUsers,\r\n        currentPage:state.UsersPageReducer.currentPage,\r\n        isFetching: state.UsersPageReducer.isFetching,\r\n\r\n    }\r\n};\r\n\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        follow:(userID) => {\r\n            dispatch(follow(userID));\r\n        },\r\n        unfollow:(userID) => {\r\n            dispatch(unfollow(userID));\r\n        },\r\n        setUsers:(users) => {\r\n            dispatch(setUsers(users));\r\n        },\r\n        setCurrent:(pageNumber) => {\r\n            dispatch(setCurrent(pageNumber))\r\n        },\r\n        setTotalUsersCount:(totalCount) => {\r\n            dispatch(setTotalUsersCount(totalCount))\r\n        },\r\n        isFetchingTrue:() => {\r\n            dispatch(isFetchingTrue())\r\n        },\r\n        isFetchingFalse:()=> {\r\n            dispatch(isFetchingFalse())\r\n        }\r\n    }\r\n};*/\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrent,\r\n    setTotalUsersCount,\r\n    isFetchingTrue,\r\n    isFetchingFalse,\r\n    }\r\n)(UsersContainer);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./Component/Header/Header\";\nimport Main from \"./Component/Main/Main/Main\";\nimport Footer from \"./Component/Footer/Footer\";\nimport Dialogs from \"./Component/Main/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\n\nimport MainContainer from \"./Component/Main/Main/MainContainer\";\nimport UsersContainer from \"./Component/Main/Users/UsersContainer\";\n\n\nfunction App(props) {\n\n    return (\n            <div className=\"App\">\n                <Header/>\n\n\n                <Route path='/profile/:userID?' render = { () => <MainContainer  />} />\n\n                <Route path=\"/dialogs\" component={Dialogs} />\n                <Route path=\"/users\" component={UsersContainer} />\n\n                <Footer/>\n\n\n            </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport ProfilePageReducer from \"./Reducers/ProfileReducer\";\r\nimport UsersPageReducer from \"./Reducers/UsersReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    ProfilePageReducer,\r\n    UsersPageReducer\r\n});\r\n\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/ReduxStore\"\n\n\n\n let rerenderEntireTree = (state) => {\n     ReactDOM.render(\n\n         <React.StrictMode>\n             <BrowserRouter>\n                 <Provider store={store} >\n                     <App  />\n                 </Provider>\n             </BrowserRouter>\n         </React.StrictMode>,\n         document.getElementById('root')\n     );\n };\n\nrerenderEntireTree(store.getState());\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}